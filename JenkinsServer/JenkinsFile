pipeline {
   agent any   

   environment {
        JENKINS_HOME = 'D:/Jenkins'
        DELAY_TIME = '0.2'
    }

   stages {
        stage('Build') {
            steps {
                // // This command is done implicitely by the config on the Jenkins
                // checkout([$class: 'GitSCM', branches: [[name: '*/master']],
                //     userRemoteConfigs: [[url: 'https://github.com/PabloBelmonte/AutoPlant.git']]])
                info('Build')
            }
            //  post {
            //     // If Maven was able to run the tests, even if some of the test
            //     // failed, record the test results and archive the jar file.
            //     success {
            //        junit '**/target/surefire-reports/TEST-*.xml'
            //        archiveArtifacts 'target/*.jar'
            //     }
            //  }
        }
        stage('Run Pump') {
            steps {
                // info('Run Pump')
                runPython('uC_interface/run_pump.py')
            }

        }

        stage('Get Sensor Data') {
            steps {
                runPython('uC_interface/get_sensor_data.py')
                script {
                    def readSensorData = readJSON file: "./uC_interface/sensor.json"
                    readSensorData.each { key, value ->
                        echo "Sensor '$key' = $value"
                    }
                }
                // bat "echo $readSensorData.temperature"
                // info('Temperature = $readSensorData.temperature')
                // info('PH = $readSensorData.ph')
                // info('Humidity = $readSensorData.humidity')
            }
        }
    }
    post {
    // If Maven was able to run the tests, even if some of the test
    // failed, record the test results and archive the jar file.
        // success {
        //     junit '**/target/surefire-reports/TEST-*.xml'
        //     archiveArtifacts 'target/*.jar'
        // }
        always {
            echo 'One way or another, I have finished'
            // deleteDir() /* clean up our workspace */
            plot csvFileName: 'plot-8e54e334-ab7b-4c9f-94f7-b9d8965723df.csv',
                csvSeries: [[
                                    file: 'uC_interface/sensorRecordData.csv',
                                    exclusionValues: '',
                                    displayTableFlag: false,
                                    inclusionFlag: 'OFF',
                                    url: '']],
                group: 'Sensor',
                title: 'Sensor 1',
                style: 'line',
                exclZero: false,
                keepRecords: false,
                logarithmic: false,
                numBuilds: '',
                useDescr: false,
                yaxis: '',
                yaxisMaximum: '',
                yaxisMinimum: ''
        }
        success {
            echo 'Success!'
            updateGit('uC_interface/sensorRecordData.csv')
            // mail to: 'pnabelmonte@gmail.com',
            //     subject: "Success Pipeline: ${currentBuild.fullDisplayName}",
            //     body: "Everything right with ${env.BUILD_URL}"
        }
        unstable {
            echo 'I am unstable :/'
        }
        failure {
            echo 'I failed :('
        }
        changed {
            echo 'Things were different before...'
        }
    }
}

def updateGit(name) {
    script {
    if (isUnix()) {
            sh "python $WORKSPACE/$name"
        } else {
            bat "git add $WORKSPACE/$name"
        }
    }
}

def runPython(name) {
    script {
    if (isUnix()) {
            sh "python $WORKSPACE/$name"
        } else {
            bat "python $WORKSPACE/$name"
        }
    }
}

def info(message) {
    echo "INFO: ${message}"
}

def warning(message) {
    echo "WARNING: ${message}"
}

def error(message) {
    echo "ERROR: ${message}"
}